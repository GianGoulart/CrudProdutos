// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/GianGoulart/CrudProdutos/model"
	mock "github.com/stretchr/testify/mock"
)

// IProdutoStore is an autogenerated mock type for the IProdutoStore type
type IProdutoStore struct {
	mock.Mock
}

// CreateProduto provides a mock function with given fields: ctx, _a1
func (_m *IProdutoStore) CreateProduto(ctx context.Context, _a1 *model.Produto) (*model.Produto, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.Produto
	if rf, ok := ret.Get(0).(func(context.Context, *model.Produto) *model.Produto); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Produto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Produto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProdutoByCodigo provides a mock function with given fields: ctx, _a1
func (_m *IProdutoStore) DeleteProdutoByCodigo(ctx context.Context, _a1 *model.Produto) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Produto) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindProdutoByCodigo provides a mock function with given fields: ctx, codigo
func (_m *IProdutoStore) FindProdutoByCodigo(ctx context.Context, codigo string) (*model.Produto, error) {
	ret := _m.Called(ctx, codigo)

	var r0 *model.Produto
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Produto); ok {
		r0 = rf(ctx, codigo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Produto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, codigo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProdutoByNome provides a mock function with given fields: ctx, nome
func (_m *IProdutoStore) FindProdutoByNome(ctx context.Context, nome string) (*[]model.Produto, error) {
	ret := _m.Called(ctx, nome)

	var r0 *[]model.Produto
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]model.Produto); ok {
		r0 = rf(ctx, nome)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Produto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nome)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProdutos provides a mock function with given fields: ctx
func (_m *IProdutoStore) FindProdutos(ctx context.Context) (*[]model.Produto, error) {
	ret := _m.Called(ctx)

	var r0 *[]model.Produto
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.Produto); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Produto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduto provides a mock function with given fields: ctx, _a1
func (_m *IProdutoStore) UpdateProduto(ctx context.Context, _a1 *model.Produto) (*model.Produto, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.Produto
	if rf, ok := ret.Get(0).(func(context.Context, *model.Produto) *model.Produto); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Produto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Produto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
